  # Definition of the SIR model
def SIR(INPUT, t, BETA, gamma):
    k = 16
    S, I, R = INPUT[:16], INPUT[16:32], INPUT[32:]
    Y = np.zeros((48)) 
    
    for i in range(k): 
        SUM = np.dot(BETA[i], I/(N*n)) * S[i]
        Y[i] = (-1)* SUM
        Y[(k+i)] = SUM - gamma * I[i]
        Y[(2*k+i)] = gamma * I[i]

    return Y
    
    
    # Definition of the function for the plots of the SIR results
def plot_SIR(S, I, R, t):
    colors = ['r','tab:orange','lightcoral','b','c','m','gold','peachpuff','tab:pink','mediumorchid',
          'darkmagenta','deeppink','dodgerblue','steelblue','darkturquoise','seagreen']
    
    print('Time range: days {} - {}'.format(t[0],t[-1]))
    
    fig, axs = plt.subplots(nrows=1, ncols=3, facecolor='w', figsize=(9,3))
    
    axs[0].set_title('Susceptibles')
    for i in range(16):
        axs[0].plot(t, S[i], colors[i], alpha=0.6, lw=2)
    axs[0].set_xlabel('Time')
    axs[0].set_ylabel('S')
    
    axs[1].set_title('Infected')
    for i in range(16):
        axs[1].plot(t, I[i], colors[i], alpha=0.6, lw=2)
    axs[1].set_xlabel('Time')
    axs[1].set_ylabel('I')

    axs[2].set_title('Recovered')
    for i in range(16):
        axs[2].plot(t, R[i], colors[i], alpha=0.6, lw=2)
    axs[2].set_xlabel('Time')
    axs[2].set_ylabel('R')

    axs[2].legend(loc="upper right", fontsize=9, frameon=False) # upper left corner
    fig.tight_layout()
    for aa in range(3):
        ax = axs[aa]
        for spine in ('top', 'right'): 
            ax.spines[spine].set_visible(False)
    plt.legend(pavia['Age group'], bbox_to_anchor=(1.05, 1), loc='upper left')
    
    
    # Definition of the calibration function for the SIR model
def calibrate_model(R0s, INPUT, time):

    MSEs = []  
    I_hats = [] 
    qs = []

    for R0 in R0s:
        q = R0 * gamma_PV / ro
        BETA = q * C.values
        qs.append(q)

        RES = odeint(SIR, INPUT ,time, args = (BETA, gamma_PV))
        S, I_hat, R = RES.T[:16], RES.T[16:32], RES.T[32:]

        I_daily = (I_hat.sum(axis = 0)[1:] + R.sum(axis = 0)[1:]) - (I_hat.sum(axis = 0)[:-1] + R.sum(axis = 0)[:-1])
        I_hats.append(I_daily)
        true_data = provinces['PV'][time[0]: time[-1]]

        MSE = np.sqrt(sum((I_daily - true_data)**2)/len(true_data))
        MSEs.append(MSE)
        
    cal = pd.DataFrame({'R0': R0s, 'q': qs, 'MSE': MSEs, 'I_hat': I_hats})   
    best_param = cal[cal['MSE'] == np.min(cal['MSE'])]

    return cal, best_param
    
    
    # Run the calibration
R0s = np.arange(1,3,0.001)
res_cal, best_param = calibrate_model(R0s, INPUT0, t0)
best_param[['R0','q','MSE']] # optimal parameters


R0_new = 1.909 # Set the optimal R0 
q_new = round(gamma_PV*R0_new/ro, 5)
BETA_new = q_new *C.values


# Run the SIR model with the calibrated parameters
RES_new = odeint(SIR, INPUT0, t0, args = (BETA_new, gamma_PV))
S_new, I_new, R_new = RES_new.T[:16], RES_new.T[16:32], RES_new.T[32:]


#Plot the results of the SIR:
colors = ['r','tab:orange','lightcoral','b','c','m','gold','peachpuff','tab:pink','mediumorchid',
          'darkmagenta','deeppink','dodgerblue','steelblue','darkturquoise','seagreen']

I_daily_PV = (I_new[:,1:] + R_new[:,1:]) - (I_new[:,:-1] + R_new[:,:-1])    

for i in range(16): 
    plt.plot(t0[:-1], I_daily_PV[i], c = colors[i])
    
plt.title('New daily cases for Pavia (best model)')
plt.xlabel('Time')
plt.ylabel('Infected')
plt.legend(pavia['Age group'])
plt.show()


plot_SIR(S_new, I_new, R_new, t0)

